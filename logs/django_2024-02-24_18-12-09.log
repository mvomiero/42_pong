(0.001) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) SELECT "django_migrations"."id", "django_migrations"."app", "django_migrations"."name", "django_migrations"."applied" FROM "django_migrations"; args=(); alias=default
(0.000) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) SELECT "django_migrations"."id", "django_migrations"."app", "django_migrations"."name", "django_migrations"."applied" FROM "django_migrations"; args=(); alias=default
(0.001) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) SELECT "django_migrations"."id", "django_migrations"."app", "django_migrations"."name", "django_migrations"."applied" FROM "django_migrations"; args=(); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'admin'; args=('admin',); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'admin' AND "django_content_type"."model" = 'logentry') LIMIT 21; args=('admin', 'logentry'); alias=default
(0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (1) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(1,); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'admin'; args=('admin',); alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_gamedata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_tournamentdata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 10', 4, 'Player 5', 11, '2024-01-06T18:01:29.423472+01:00'::timestamptz, 109, false) RETURNING "pong_gamedata"."id"; args=('Player 10', 4, 'Player 5', 11, datetime.datetime(2024, 1, 6, 18, 1, 29, 423472, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 109, False); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 13', 11, 'Player 10', 4, '2024-01-19T02:44:10.423472+01:00'::timestamptz, 231, false) RETURNING "pong_gamedata"."id"; args=('Player 13', 11, 'Player 10', 4, datetime.datetime(2024, 1, 19, 2, 44, 10, 423472, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 231, False); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 7', 11, 'Player 12', 2, '2024-01-03T08:46:31.423472+01:00'::timestamptz, 212, true) RETURNING "pong_gamedata"."id"; args=('Player 7', 11, 'Player 12', 2, datetime.datetime(2024, 1, 3, 8, 46, 31, 423472, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 212, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 3', 11, 'Player 14', 0, '2024-01-03T08:54:32.423472+01:00'::timestamptz, 837, true) RETURNING "pong_gamedata"."id"; args=('Player 3', 11, 'Player 14', 0, datetime.datetime(2024, 1, 3, 8, 54, 32, 423472, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 837, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 7', 9, 'Player 3', 11, '2024-01-03T08:56:50.423472+01:00'::timestamptz, 222, true) RETURNING "pong_gamedata"."id"; args=('Player 7', 9, 'Player 3', 11, datetime.datetime(2024, 1, 3, 8, 56, 50, 423472, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 222, True); alias=default
(0.007) INSERT INTO "pong_tournamentdata" ("tour_id", "match_id_semi_1", "match_id_semi_2", "match_id_final", "tournament_end_timestamp", "tournament_duration_secs", "player_ranking", "blockchain_hash") VALUES (0, 52, 53, 54, '2024-01-03T08:56:50.423472+01:00'::timestamptz, 975, '["Player 3", "Player 7", "Player 12", "Player 14"]', '0x2fe12855a70ea67ade294dcf14df7af591d6d816c39e63cb29bfc0f94c242af3') RETURNING "pong_tournamentdata"."id"; args=(0, 52, 53, 54, datetime.datetime(2024, 1, 3, 8, 56, 50, 423472, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 975, <psycopg2._json.Json object at 0x7fab4d7c8350>, '0x2fe12855a70ea67ade294dcf14df7af591d6d816c39e63cb29bfc0f94c242af3'); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'auth'; args=('auth',); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'auth' AND "django_content_type"."model" = 'permission') LIMIT 21; args=('auth', 'permission'); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'auth' AND "django_content_type"."model" = 'group') LIMIT 21; args=('auth', 'group'); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'auth' AND "django_content_type"."model" = 'user') LIMIT 21; args=('auth', 'user'); alias=default
(0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (2, 3, 4) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(2, 3, 4); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'auth'; args=('auth',); alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_gamedata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_tournamentdata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 0', 11, 'Player 10', 7, '2024-01-21T19:43:04.786406+01:00'::timestamptz, 789, false) RETURNING "pong_gamedata"."id"; args=('Player 0', 11, 'Player 10', 7, datetime.datetime(2024, 1, 21, 19, 43, 4, 786406, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 789, False); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 7', 6, 'Player 9', 11, '2023-12-16T16:16:51.786406+01:00'::timestamptz, 220, false) RETURNING "pong_gamedata"."id"; args=('Player 7', 6, 'Player 9', 11, datetime.datetime(2023, 12, 16, 16, 16, 51, 786406, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 220, False); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 9', 6, 'Player 12', 11, '2023-12-24T16:16:36.786406+01:00'::timestamptz, 961, true) RETURNING "pong_gamedata"."id"; args=('Player 9', 6, 'Player 12', 11, datetime.datetime(2023, 12, 24, 16, 16, 36, 786406, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 961, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 2', 2, 'Player 10', 11, '2023-12-24T16:13:19.786406+01:00'::timestamptz, 722, true) RETURNING "pong_gamedata"."id"; args=('Player 2', 2, 'Player 10', 11, datetime.datetime(2023, 12, 24, 16, 13, 19, 786406, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 722, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 12', 11, 'Player 10', 5, '2023-12-24T16:17:10.786406+01:00'::timestamptz, 359, true) RETURNING "pong_gamedata"."id"; args=('Player 12', 11, 'Player 10', 5, datetime.datetime(2023, 12, 24, 16, 17, 10, 786406, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 359, True); alias=default
(0.007) INSERT INTO "pong_tournamentdata" ("tour_id", "match_id_semi_1", "match_id_semi_2", "match_id_final", "tournament_end_timestamp", "tournament_duration_secs", "player_ranking", "blockchain_hash") VALUES (0, 57, 58, 59, '2023-12-24T16:17:10.786406+01:00'::timestamptz, 995, '["Player 12", "Player 10", "Player 9", "Player 2"]', '0x6766a47e44176228f26819399fff98df77e53601ea935b6b4324ed9b8844121f') RETURNING "pong_tournamentdata"."id"; args=(0, 57, 58, 59, datetime.datetime(2023, 12, 24, 16, 17, 10, 786406, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 995, <psycopg2._json.Json object at 0x7fab4d7ca960>, '0x6766a47e44176228f26819399fff98df77e53601ea935b6b4324ed9b8844121f'); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'contenttypes'; args=('contenttypes',); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'contenttypes' AND "django_content_type"."model" = 'contenttype') LIMIT 21; args=('contenttypes', 'contenttype'); alias=default
(0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (5) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(5,); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'contenttypes'; args=('contenttypes',); alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_gamedata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_tournamentdata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 15', 11, 'Player 8', 2, '2023-11-16T14:21:41.866411+01:00'::timestamptz, 217, false) RETURNING "pong_gamedata"."id"; args=('Player 15', 11, 'Player 8', 2, datetime.datetime(2023, 11, 16, 14, 21, 41, 866411, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 217, False); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 11', 11, 'Player 10', 7, '2023-12-06T03:01:55.866411+01:00'::timestamptz, 867, false) RETURNING "pong_gamedata"."id"; args=('Player 11', 11, 'Player 10', 7, datetime.datetime(2023, 12, 6, 3, 1, 55, 866411, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 867, False); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 13', 7, 'Player 5', 11, '2023-12-26T05:07:44.866411+01:00'::timestamptz, 367, true) RETURNING "pong_gamedata"."id"; args=('Player 13', 7, 'Player 5', 11, datetime.datetime(2023, 12, 26, 5, 7, 44, 866411, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 367, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 3', 11, 'Player 10', 5, '2023-12-26T05:07:17.866411+01:00'::timestamptz, 713, true) RETURNING "pong_gamedata"."id"; args=('Player 3', 11, 'Player 10', 5, datetime.datetime(2023, 12, 26, 5, 7, 17, 866411, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 713, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 5', 11, 'Player 3', 0, '2023-12-26T05:08:46.866411+01:00'::timestamptz, 60, true) RETURNING "pong_gamedata"."id"; args=('Player 5', 11, 'Player 3', 0, datetime.datetime(2023, 12, 26, 5, 8, 46, 866411, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 60, True); alias=default
