(0.001) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) SELECT "django_migrations"."id", "django_migrations"."app", "django_migrations"."name", "django_migrations"."applied" FROM "django_migrations"; args=(); alias=default
(0.001) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) SELECT "django_migrations"."id", "django_migrations"."app", "django_migrations"."name", "django_migrations"."applied" FROM "django_migrations"; args=(); alias=default
(0.001) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.001) 
            SELECT
                c.relname,
                CASE
                    WHEN c.relispartition THEN 'p'
                    WHEN c.relkind IN ('m', 'v') THEN 'v'
                    ELSE 't'
                END,
                obj_description(c.oid, 'pg_class')
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')
                AND n.nspname NOT IN ('pg_catalog', 'pg_toast')
                AND pg_catalog.pg_table_is_visible(c.oid)
        ; args=None; alias=default
(0.000) SELECT "django_migrations"."id", "django_migrations"."app", "django_migrations"."name", "django_migrations"."applied" FROM "django_migrations"; args=(); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'admin'; args=('admin',); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'admin' AND "django_content_type"."model" = 'logentry') LIMIT 21; args=('admin', 'logentry'); alias=default
(0.001) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (1) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(1,); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'admin'; args=('admin',); alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_gamedata"; args=(); alias=default
(0.006) COMMIT; args=None; alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_tournamentdata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 9', 6, 'Player 1', 11, '2023-11-01T03:19:22.251887+01:00'::timestamptz, 213, true) RETURNING "pong_gamedata"."id"; args=('Player 9', 6, 'Player 1', 11, datetime.datetime(2023, 11, 1, 3, 19, 22, 251887, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 213, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 0', 11, 'Player 12', 3, '2023-11-01T03:24:13.251887+01:00'::timestamptz, 399, true) RETURNING "pong_gamedata"."id"; args=('Player 0', 11, 'Player 12', 3, datetime.datetime(2023, 11, 1, 3, 24, 13, 251887, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 399, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 1', 11, 'Player 0', 3, '2023-11-01T03:28:20.251887+01:00'::timestamptz, 116, true) RETURNING "pong_gamedata"."id"; args=('Player 1', 11, 'Player 0', 3, datetime.datetime(2023, 11, 1, 3, 28, 20, 251887, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 116, True); alias=default
(0.007) INSERT INTO "pong_tournamentdata" ("tour_id", "match_id_semi_1", "match_id_semi_2", "match_id_final", "tournament_end_timestamp", "tournament_duration_secs", "player_ranking", "blockchain_hash") VALUES (0, 65, 66, 67, '2023-11-01T03:28:20.251887+01:00'::timestamptz, 751, '["Player 1", "Player 0", "Player 9", "Player 12"]', '0x386cd289732ee19bded6b616e7d04e7376f8f1a360df31a5a7b9396dbfff8400') RETURNING "pong_tournamentdata"."id"; args=(0, 65, 66, 67, datetime.datetime(2023, 11, 1, 3, 28, 20, 251887, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 751, <psycopg2._json.Json object at 0x7f1f49c5fe60>, '0x386cd289732ee19bded6b616e7d04e7376f8f1a360df31a5a7b9396dbfff8400'); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'auth'; args=('auth',); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'auth' AND "django_content_type"."model" = 'permission') LIMIT 21; args=('auth', 'permission'); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'auth' AND "django_content_type"."model" = 'group') LIMIT 21; args=('auth', 'group'); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'auth' AND "django_content_type"."model" = 'user') LIMIT 21; args=('auth', 'user'); alias=default
(0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (2, 3, 4) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(2, 3, 4); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'auth'; args=('auth',); alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_gamedata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_tournamentdata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 9', 4, 'Player 5', 11, '2024-01-11T12:33:23.696343+01:00'::timestamptz, 868, true) RETURNING "pong_gamedata"."id"; args=('Player 9', 4, 'Player 5', 11, datetime.datetime(2024, 1, 11, 12, 33, 23, 696343, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 868, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 1', 11, 'Player 7', 4, '2024-01-11T12:34:26.696343+01:00'::timestamptz, 945, true) RETURNING "pong_gamedata"."id"; args=('Player 1', 11, 'Player 7', 4, datetime.datetime(2024, 1, 11, 12, 34, 26, 696343, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 945, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 5', 3, 'Player 1', 11, '2024-01-11T12:35:17.696343+01:00'::timestamptz, 477, true) RETURNING "pong_gamedata"."id"; args=('Player 5', 3, 'Player 1', 11, datetime.datetime(2024, 1, 11, 12, 35, 17, 696343, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 477, True); alias=default
(0.007) INSERT INTO "pong_tournamentdata" ("tour_id", "match_id_semi_1", "match_id_semi_2", "match_id_final", "tournament_end_timestamp", "tournament_duration_secs", "player_ranking", "blockchain_hash") VALUES (0, 68, 69, 70, '2024-01-11T12:35:17.696343+01:00'::timestamptz, 996, '["Player 1", "Player 5", "Player 9", "Player 7"]', '0x9c8eb78286a5936905aa0da96ba68578bee1ec1c4216da666cdc06f0c7416b31') RETURNING "pong_tournamentdata"."id"; args=(0, 68, 69, 70, datetime.datetime(2024, 1, 11, 12, 35, 17, 696343, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 996, <psycopg2._json.Json object at 0x7f1f49c94cb0>, '0x9c8eb78286a5936905aa0da96ba68578bee1ec1c4216da666cdc06f0c7416b31'); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'contenttypes'; args=('contenttypes',); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."app_label" = 'contenttypes' AND "django_content_type"."model" = 'contenttype') LIMIT 21; args=('contenttypes', 'contenttype'); alias=default
(0.000) SELECT "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "auth_permission"."content_type_id" IN (5) ORDER BY "django_content_type"."app_label" ASC, "django_content_type"."model" ASC, "auth_permission"."codename" ASC; args=(5,); alias=default
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."app_label" = 'contenttypes'; args=('contenttypes',); alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_gamedata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) BEGIN; args=None; alias=default
(0.000) DELETE FROM "pong_tournamentdata"; args=(); alias=default
(0.000) COMMIT; args=None; alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_gamedata"; args=(); alias=default
(0.000) SELECT COUNT(*) AS "__count" FROM "pong_tournamentdata"; args=(); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 8', 3, 'Player 0', 11, '2024-02-13T13:23:39.976752+01:00'::timestamptz, 249, true) RETURNING "pong_gamedata"."id"; args=('Player 8', 3, 'Player 0', 11, datetime.datetime(2024, 2, 13, 13, 23, 39, 976752, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 249, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 3', 11, 'Player 9', 8, '2024-02-13T13:29:55.976752+01:00'::timestamptz, 230, true) RETURNING "pong_gamedata"."id"; args=('Player 3', 11, 'Player 9', 8, datetime.datetime(2024, 2, 13, 13, 29, 55, 976752, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 230, True); alias=default
(0.001) INSERT INTO "pong_gamedata" ("player1_name", "player1_points", "player2_name", "player2_points", "game_end_timestamp", "game_duration_secs", "is_tournament_game") VALUES ('Player 0', 8, 'Player 3', 11, '2024-02-13T13:33:33.976752+01:00'::timestamptz, 303, true) RETURNING "pong_gamedata"."id"; args=('Player 0', 8, 'Player 3', 11, datetime.datetime(2024, 2, 13, 13, 33, 33, 976752, tzinfo=<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>), 303, True); alias=default
